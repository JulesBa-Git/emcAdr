// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ATCtoNumeric
void ATCtoNumeric(DataFrame& patients, const DataFrame& tree);
RcppExport SEXP _emcAdr_ATCtoNumeric(SEXP patientsSEXP, SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type patients(patientsSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type tree(treeSEXP);
    ATCtoNumeric(patients, tree);
    return R_NilValue;
END_RCPP
}
// frequencyHist
void frequencyHist(const Rcpp::IntegerVector& RRDistribution, Rcpp::Function f);
RcppExport SEXP _emcAdr_frequencyHist(SEXP RRDistributionSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type RRDistribution(RRDistributionSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type f(fSEXP);
    frequencyHist(RRDistribution, f);
    return R_NilValue;
END_RCPP
}
// EMC
Rcpp::List EMC(int n, const DataFrame& ATCtree, const DataFrame& observations, double P_type1, double P_type2, double P_crossover, int nbIndividuals, int nbResults, double alpha, Rcpp::Nullable<Rcpp::List> startingIndividuals, Rcpp::Nullable<Rcpp::NumericVector> startingTemperatures);
RcppExport SEXP _emcAdr_EMC(SEXP nSEXP, SEXP ATCtreeSEXP, SEXP observationsSEXP, SEXP P_type1SEXP, SEXP P_type2SEXP, SEXP P_crossoverSEXP, SEXP nbIndividualsSEXP, SEXP nbResultsSEXP, SEXP alphaSEXP, SEXP startingIndividualsSEXP, SEXP startingTemperaturesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type ATCtree(ATCtreeSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< double >::type P_type1(P_type1SEXP);
    Rcpp::traits::input_parameter< double >::type P_type2(P_type2SEXP);
    Rcpp::traits::input_parameter< double >::type P_crossover(P_crossoverSEXP);
    Rcpp::traits::input_parameter< int >::type nbIndividuals(nbIndividualsSEXP);
    Rcpp::traits::input_parameter< int >::type nbResults(nbResultsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type startingIndividuals(startingIndividualsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type startingTemperatures(startingTemperaturesSEXP);
    rcpp_result_gen = Rcpp::wrap(EMC(n, ATCtree, observations, P_type1, P_type2, P_crossover, nbIndividuals, nbResults, alpha, startingIndividuals, startingTemperatures));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_emcAdr_ATCtoNumeric", (DL_FUNC) &_emcAdr_ATCtoNumeric, 2},
    {"_emcAdr_frequencyHist", (DL_FUNC) &_emcAdr_frequencyHist, 2},
    {"_emcAdr_EMC", (DL_FUNC) &_emcAdr_EMC, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_emcAdr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
