// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ATCtoNumeric
void ATCtoNumeric(DataFrame& patients, const DataFrame& tree);
RcppExport SEXP _emcAdr_ATCtoNumeric(SEXP patientsSEXP, SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type patients(patientsSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type tree(treeSEXP);
    ATCtoNumeric(patients, tree);
    return R_NilValue;
END_RCPP
}
// histogramToDitribution
Rcpp::NumericVector histogramToDitribution(const std::vector<int>& vec);
RcppExport SEXP _emcAdr_histogramToDitribution(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(histogramToDitribution(vec));
    return rcpp_result_gen;
END_RCPP
}
// OustandingScoreToDistribution
Rcpp::NumericVector OustandingScoreToDistribution(const std::vector<double>& outstanding_score, int max_score);
RcppExport SEXP _emcAdr_OustandingScoreToDistribution(SEXP outstanding_scoreSEXP, SEXP max_scoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type outstanding_score(outstanding_scoreSEXP);
    Rcpp::traits::input_parameter< int >::type max_score(max_scoreSEXP);
    rcpp_result_gen = Rcpp::wrap(OustandingScoreToDistribution(outstanding_score, max_score));
    return rcpp_result_gen;
END_RCPP
}
// p_value_csv_file
void p_value_csv_file(const std::vector<Rcpp::List>& distribution_outputs, const std::string& filename, bool filtred_distribution, const std::string& sep);
RcppExport SEXP _emcAdr_p_value_csv_file(SEXP distribution_outputsSEXP, SEXP filenameSEXP, SEXP filtred_distributionSEXP, SEXP sepSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Rcpp::List>& >::type distribution_outputs(distribution_outputsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< bool >::type filtred_distribution(filtred_distributionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type sep(sepSEXP);
    p_value_csv_file(distribution_outputs, filename, filtred_distribution, sep);
    return R_NilValue;
END_RCPP
}
// csv_to_population
Rcpp::List csv_to_population(const std::vector<std::string>& ATC_name, const std::string& filename, const std::string& sep);
RcppExport SEXP _emcAdr_csv_to_population(SEXP ATC_nameSEXP, SEXP filenameSEXP, SEXP sepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type ATC_name(ATC_nameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type sep(sepSEXP);
    rcpp_result_gen = Rcpp::wrap(csv_to_population(ATC_name, filename, sep));
    return rcpp_result_gen;
END_RCPP
}
// string_list_to_int_cocktails
Rcpp::List string_list_to_int_cocktails(const std::vector<std::string>& ATC_name, const std::vector<std::string>& lines);
RcppExport SEXP _emcAdr_string_list_to_int_cocktails(SEXP ATC_nameSEXP, SEXP linesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type ATC_name(ATC_nameSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type lines(linesSEXP);
    rcpp_result_gen = Rcpp::wrap(string_list_to_int_cocktails(ATC_name, lines));
    return rcpp_result_gen;
END_RCPP
}
// int_cocktail_to_string_cocktail
std::vector<std::vector<std::string>> int_cocktail_to_string_cocktail(const std::vector<std::vector<int>>& cocktails, const std::vector<std::string>& ATC_name);
RcppExport SEXP _emcAdr_int_cocktail_to_string_cocktail(SEXP cocktailsSEXP, SEXP ATC_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::vector<int>>& >::type cocktails(cocktailsSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type ATC_name(ATC_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(int_cocktail_to_string_cocktail(cocktails, ATC_name));
    return rcpp_result_gen;
END_RCPP
}
// DistributionApproximation
Rcpp::List DistributionApproximation(int epochs, const DataFrame& ATCtree, const DataFrame& observations, int temperature, int nbResults, int Smax, double p_type1, int beta, int max_score, int num_thread, bool verbose);
RcppExport SEXP _emcAdr_DistributionApproximation(SEXP epochsSEXP, SEXP ATCtreeSEXP, SEXP observationsSEXP, SEXP temperatureSEXP, SEXP nbResultsSEXP, SEXP SmaxSEXP, SEXP p_type1SEXP, SEXP betaSEXP, SEXP max_scoreSEXP, SEXP num_threadSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type epochs(epochsSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type ATCtree(ATCtreeSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< int >::type temperature(temperatureSEXP);
    Rcpp::traits::input_parameter< int >::type nbResults(nbResultsSEXP);
    Rcpp::traits::input_parameter< int >::type Smax(SmaxSEXP);
    Rcpp::traits::input_parameter< double >::type p_type1(p_type1SEXP);
    Rcpp::traits::input_parameter< int >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type max_score(max_scoreSEXP);
    Rcpp::traits::input_parameter< int >::type num_thread(num_threadSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(DistributionApproximation(epochs, ATCtree, observations, temperature, nbResults, Smax, p_type1, beta, max_score, num_thread, verbose));
    return rcpp_result_gen;
END_RCPP
}
// GeneticAlgorithm
Rcpp::List GeneticAlgorithm(int epochs, int nbIndividuals, const DataFrame& ATCtree, const DataFrame& observations, int num_thread, bool diversity, double p_crossover, double p_mutation, int nbElite, int tournamentSize, double alpha, bool summary);
RcppExport SEXP _emcAdr_GeneticAlgorithm(SEXP epochsSEXP, SEXP nbIndividualsSEXP, SEXP ATCtreeSEXP, SEXP observationsSEXP, SEXP num_threadSEXP, SEXP diversitySEXP, SEXP p_crossoverSEXP, SEXP p_mutationSEXP, SEXP nbEliteSEXP, SEXP tournamentSizeSEXP, SEXP alphaSEXP, SEXP summarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type epochs(epochsSEXP);
    Rcpp::traits::input_parameter< int >::type nbIndividuals(nbIndividualsSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type ATCtree(ATCtreeSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< int >::type num_thread(num_threadSEXP);
    Rcpp::traits::input_parameter< bool >::type diversity(diversitySEXP);
    Rcpp::traits::input_parameter< double >::type p_crossover(p_crossoverSEXP);
    Rcpp::traits::input_parameter< double >::type p_mutation(p_mutationSEXP);
    Rcpp::traits::input_parameter< int >::type nbElite(nbEliteSEXP);
    Rcpp::traits::input_parameter< int >::type tournamentSize(tournamentSizeSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type summary(summarySEXP);
    rcpp_result_gen = Rcpp::wrap(GeneticAlgorithm(epochs, nbIndividuals, ATCtree, observations, num_thread, diversity, p_crossover, p_mutation, nbElite, tournamentSize, alpha, summary));
    return rcpp_result_gen;
END_RCPP
}
// trueDistributionDrugs
Rcpp::List trueDistributionDrugs(const DataFrame& ATCtree, const DataFrame& observations, int beta, int max_score, int nbResults, int num_thread);
RcppExport SEXP _emcAdr_trueDistributionDrugs(SEXP ATCtreeSEXP, SEXP observationsSEXP, SEXP betaSEXP, SEXP max_scoreSEXP, SEXP nbResultsSEXP, SEXP num_threadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type ATCtree(ATCtreeSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< int >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type max_score(max_scoreSEXP);
    Rcpp::traits::input_parameter< int >::type nbResults(nbResultsSEXP);
    Rcpp::traits::input_parameter< int >::type num_thread(num_threadSEXP);
    rcpp_result_gen = Rcpp::wrap(trueDistributionDrugs(ATCtree, observations, beta, max_score, nbResults, num_thread));
    return rcpp_result_gen;
END_RCPP
}
// trueDistributionSizeTwoCocktail
Rcpp::List trueDistributionSizeTwoCocktail(const DataFrame& ATCtree, const DataFrame& observations, int beta, int max_score, int nbResults, int num_thread);
RcppExport SEXP _emcAdr_trueDistributionSizeTwoCocktail(SEXP ATCtreeSEXP, SEXP observationsSEXP, SEXP betaSEXP, SEXP max_scoreSEXP, SEXP nbResultsSEXP, SEXP num_threadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type ATCtree(ATCtreeSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< int >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type max_score(max_scoreSEXP);
    Rcpp::traits::input_parameter< int >::type nbResults(nbResultsSEXP);
    Rcpp::traits::input_parameter< int >::type num_thread(num_threadSEXP);
    rcpp_result_gen = Rcpp::wrap(trueDistributionSizeTwoCocktail(ATCtree, observations, beta, max_score, nbResults, num_thread));
    return rcpp_result_gen;
END_RCPP
}
// compute_RR_on_list
std::vector<double> compute_RR_on_list(const std::vector<std::vector<int>>& cocktails, const DataFrame& ATCtree, const DataFrame& observations, int num_thread);
RcppExport SEXP _emcAdr_compute_RR_on_list(SEXP cocktailsSEXP, SEXP ATCtreeSEXP, SEXP observationsSEXP, SEXP num_threadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::vector<int>>& >::type cocktails(cocktailsSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type ATCtree(ATCtreeSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< int >::type num_thread(num_threadSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_RR_on_list(cocktails, ATCtree, observations, num_thread));
    return rcpp_result_gen;
END_RCPP
}
// compute_hypergeom_on_list
std::vector<double> compute_hypergeom_on_list(const std::vector<std::vector<int>>& cocktails, const DataFrame& ATCtree, const DataFrame& observations, int num_thread);
RcppExport SEXP _emcAdr_compute_hypergeom_on_list(SEXP cocktailsSEXP, SEXP ATCtreeSEXP, SEXP observationsSEXP, SEXP num_threadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::vector<int>>& >::type cocktails(cocktailsSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type ATCtree(ATCtreeSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< int >::type num_thread(num_threadSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_hypergeom_on_list(cocktails, ATCtree, observations, num_thread));
    return rcpp_result_gen;
END_RCPP
}
// computeMetrics_size2
Rcpp::DataFrame computeMetrics_size2(const std::vector<std::vector<int>>& CocktailList, const DataFrame& ATCtree, const DataFrame& observations, int num_thread);
RcppExport SEXP _emcAdr_computeMetrics_size2(SEXP CocktailListSEXP, SEXP ATCtreeSEXP, SEXP observationsSEXP, SEXP num_threadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::vector<int>>& >::type CocktailList(CocktailListSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type ATCtree(ATCtreeSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< int >::type num_thread(num_threadSEXP);
    rcpp_result_gen = Rcpp::wrap(computeMetrics_size2(CocktailList, ATCtree, observations, num_thread));
    return rcpp_result_gen;
END_RCPP
}
// hyperparam_test_genetic_algorithm
void hyperparam_test_genetic_algorithm(int epochs, int nb_individuals, const DataFrame& ATCtree, const DataFrame& observations, int nb_test_desired, const std::vector<double>& mutation_rate, const std::vector<int>& nb_elite, const std::vector<double>& alphas, const std::string& path, int num_thread);
RcppExport SEXP _emcAdr_hyperparam_test_genetic_algorithm(SEXP epochsSEXP, SEXP nb_individualsSEXP, SEXP ATCtreeSEXP, SEXP observationsSEXP, SEXP nb_test_desiredSEXP, SEXP mutation_rateSEXP, SEXP nb_eliteSEXP, SEXP alphasSEXP, SEXP pathSEXP, SEXP num_threadSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type epochs(epochsSEXP);
    Rcpp::traits::input_parameter< int >::type nb_individuals(nb_individualsSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type ATCtree(ATCtreeSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< int >::type nb_test_desired(nb_test_desiredSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mutation_rate(mutation_rateSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type nb_elite(nb_eliteSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< int >::type num_thread(num_threadSEXP);
    hyperparam_test_genetic_algorithm(epochs, nb_individuals, ATCtree, observations, nb_test_desired, mutation_rate, nb_elite, alphas, path, num_thread);
    return R_NilValue;
END_RCPP
}
// print_csv
void print_csv(const std::vector<std::string>& input_filenames, const DataFrame& observations, int repetition, const DataFrame& ATCtree, const std::string& csv_filename);
RcppExport SEXP _emcAdr_print_csv(SEXP input_filenamesSEXP, SEXP observationsSEXP, SEXP repetitionSEXP, SEXP ATCtreeSEXP, SEXP csv_filenameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type input_filenames(input_filenamesSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type observations(observationsSEXP);
    Rcpp::traits::input_parameter< int >::type repetition(repetitionSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type ATCtree(ATCtreeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type csv_filename(csv_filenameSEXP);
    print_csv(input_filenames, observations, repetition, ATCtree, csv_filename);
    return R_NilValue;
END_RCPP
}
// get_dissimilarity_from_list
std::vector<std::vector<double>> get_dissimilarity_from_list(const Rcpp::List& genetic_results, const DataFrame& ATCtree);
RcppExport SEXP _emcAdr_get_dissimilarity_from_list(SEXP genetic_resultsSEXP, SEXP ATCtreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type genetic_results(genetic_resultsSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type ATCtree(ATCtreeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_dissimilarity_from_list(genetic_results, ATCtree));
    return rcpp_result_gen;
END_RCPP
}
// get_dissimilarity
std::vector<std::vector<double>> get_dissimilarity(const std::string& filename, const DataFrame& ATCtree, bool normalization);
RcppExport SEXP _emcAdr_get_dissimilarity(SEXP filenameSEXP, SEXP ATCtreeSEXP, SEXP normalizationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type ATCtree(ATCtreeSEXP);
    Rcpp::traits::input_parameter< bool >::type normalization(normalizationSEXP);
    rcpp_result_gen = Rcpp::wrap(get_dissimilarity(filename, ATCtree, normalization));
    return rcpp_result_gen;
END_RCPP
}
// get_dissimilarity_from_cocktail
std::vector<std::vector<double>> get_dissimilarity_from_cocktail(const std::vector<std::vector<int>>& cocktails, const Rcpp::DataFrame& ATCtree, bool normalization);
RcppExport SEXP _emcAdr_get_dissimilarity_from_cocktail(SEXP cocktailsSEXP, SEXP ATCtreeSEXP, SEXP normalizationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::vector<int>>& >::type cocktails(cocktailsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type ATCtree(ATCtreeSEXP);
    Rcpp::traits::input_parameter< bool >::type normalization(normalizationSEXP);
    rcpp_result_gen = Rcpp::wrap(get_dissimilarity_from_cocktail(cocktails, ATCtree, normalization));
    return rcpp_result_gen;
END_RCPP
}
// get_answer_class
Rcpp::DataFrame get_answer_class(const std::string& filename, const std::vector<std::string>& answer);
RcppExport SEXP _emcAdr_get_answer_class(SEXP filenameSEXP, SEXP answerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type answer(answerSEXP);
    rcpp_result_gen = Rcpp::wrap(get_answer_class(filename, answer));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_emcAdr_ATCtoNumeric", (DL_FUNC) &_emcAdr_ATCtoNumeric, 2},
    {"_emcAdr_histogramToDitribution", (DL_FUNC) &_emcAdr_histogramToDitribution, 1},
    {"_emcAdr_OustandingScoreToDistribution", (DL_FUNC) &_emcAdr_OustandingScoreToDistribution, 2},
    {"_emcAdr_p_value_csv_file", (DL_FUNC) &_emcAdr_p_value_csv_file, 4},
    {"_emcAdr_csv_to_population", (DL_FUNC) &_emcAdr_csv_to_population, 3},
    {"_emcAdr_string_list_to_int_cocktails", (DL_FUNC) &_emcAdr_string_list_to_int_cocktails, 2},
    {"_emcAdr_int_cocktail_to_string_cocktail", (DL_FUNC) &_emcAdr_int_cocktail_to_string_cocktail, 2},
    {"_emcAdr_DistributionApproximation", (DL_FUNC) &_emcAdr_DistributionApproximation, 11},
    {"_emcAdr_GeneticAlgorithm", (DL_FUNC) &_emcAdr_GeneticAlgorithm, 12},
    {"_emcAdr_trueDistributionDrugs", (DL_FUNC) &_emcAdr_trueDistributionDrugs, 6},
    {"_emcAdr_trueDistributionSizeTwoCocktail", (DL_FUNC) &_emcAdr_trueDistributionSizeTwoCocktail, 6},
    {"_emcAdr_compute_RR_on_list", (DL_FUNC) &_emcAdr_compute_RR_on_list, 4},
    {"_emcAdr_compute_hypergeom_on_list", (DL_FUNC) &_emcAdr_compute_hypergeom_on_list, 4},
    {"_emcAdr_computeMetrics_size2", (DL_FUNC) &_emcAdr_computeMetrics_size2, 4},
    {"_emcAdr_hyperparam_test_genetic_algorithm", (DL_FUNC) &_emcAdr_hyperparam_test_genetic_algorithm, 10},
    {"_emcAdr_print_csv", (DL_FUNC) &_emcAdr_print_csv, 5},
    {"_emcAdr_get_dissimilarity_from_list", (DL_FUNC) &_emcAdr_get_dissimilarity_from_list, 2},
    {"_emcAdr_get_dissimilarity", (DL_FUNC) &_emcAdr_get_dissimilarity, 3},
    {"_emcAdr_get_dissimilarity_from_cocktail", (DL_FUNC) &_emcAdr_get_dissimilarity_from_cocktail, 3},
    {"_emcAdr_get_answer_class", (DL_FUNC) &_emcAdr_get_answer_class, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_emcAdr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
